version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: candlefish-postgres
    environment:
      POSTGRES_USER: candlefish
      POSTGRES_PASSWORD: ${DB_PASSWORD:-localdev}
      POSTGRES_DB: candlefish
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - candlefish
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U candlefish"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: candlefish-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - candlefish
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # CLOS Orchestrator
  clos:
    build:
      context: .
      dockerfile: docker/clos/Dockerfile
    container_name: candlefish-clos
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DATABASE_URL: postgresql://candlefish:${DB_PASSWORD:-localdev}@postgres:5432/candlefish
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-development-secret-key}
      JWT_SECRET: ${JWT_SECRET:-development-jwt-secret}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - candlefish
    volumes:
      - ./clos:/app/clos:ro
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # PromoterOS API
  promoteros:
    build:
      context: .
      dockerfile: docker/promoteros/Dockerfile
    container_name: candlefish-promoteros
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DATABASE_URL: postgresql://candlefish:${DB_PASSWORD:-localdev}@postgres:5432/candlefish
      REDIS_URL: redis://redis:6379
      CLOS_URL: http://clos:8000
      PORT: 8001
    ports:
      - "8001:8001"
    depends_on:
      - clos
    networks:
      - candlefish
    volumes:
      - ./projects/promoteros:/app:ro
      - promoteros_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Paintbox Service
  paintbox:
    build:
      context: .
      dockerfile: docker/paintbox/Dockerfile
    container_name: candlefish-paintbox
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DATABASE_URL: postgresql://candlefish:${DB_PASSWORD:-localdev}@postgres:5432/candlefish
      REDIS_URL: redis://redis:6379
      CLOS_URL: http://clos:8000
      PORT: 8002
    ports:
      - "8002:8002"
    depends_on:
      - clos
    networks:
      - candlefish
    volumes:
      - ./projects/paintbox:/app:ro
      - paintbox_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # LocalStack for AWS services
  localstack:
    image: localstack/localstack:latest
    container_name: candlefish-localstack
    environment:
      - SERVICES=s3,dynamodb,secretsmanager,lambda,sqs,sns,cloudwatch
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker
      - DOCKER_HOST=unix:///var/run/docker.sock
    ports:
      - "4566:4566"
      - "4571:4571"
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts/init-localstack.sh:/docker-entrypoint-initaws.d/init-localstack.sh:ro
    networks:
      - candlefish

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: candlefish-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - candlefish
    depends_on:
      - clos

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: candlefish-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - candlefish
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  localstack_data:
  prometheus_data:
  grafana_data:
  promoteros_node_modules:
  paintbox_node_modules:

networks:
  candlefish:
    driver: bridge
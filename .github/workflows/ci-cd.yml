name: Candlefish AI CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'
  DOCKER_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  # Workflow Analysis
  analyze:
    name: Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            services:
              - 'clos/**'
              - 'agents/**'
              - 'projects/*/backend/**'
            infrastructure:
              - 'terraform/**'
              - 'k8s/**'
              - '.github/workflows/**'
            frontend:
              - 'projects/*/frontend/**'
              - 'projects/*/src/**'
              - '**/*.tsx'
              - '**/*.jsx'
            backend:
              - '**/*.py'
              - 'poetry.lock'
              - 'pyproject.toml'

  # Code Quality & Security
  quality:
    name: Code Quality & Security
    needs: analyze
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [lint, security, licenses, dependencies]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock', '**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-interaction --no-ansi
          pnpm install --frozen-lockfile

      - name: Run quality check - ${{ matrix.check }}
        run: |
          case "${{ matrix.check }}" in
            lint)
              poetry run ruff check .
              poetry run black --check .
              poetry run mypy clos/ agents/
              pnpm run lint
              ;;
            security)
              poetry run safety check
              poetry run bandit -r clos/ agents/
              pnpm audit --production
              ;;
            licenses)
              poetry run pip-licenses --with-system --allow-only="MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC"
              npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC'
              ;;
            dependencies)
              poetry check
              poetry run pip check
              pnpm outdated || true
              ;;
          esac

      - name: SonarCloud Scan
        if: matrix.check == 'security'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Testing Suite
  test:
    name: Test Suite - ${{ matrix.service }}
    needs: [analyze, quality]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [clos, promoteros, paintbox, agents]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: candlefish_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-interaction --no-ansi
          if [ -d "projects/${{ matrix.service }}" ]; then
            cd projects/${{ matrix.service }}
            if [ -f "package.json" ]; then
              npm ci
            fi
          fi

      - name: Run unit tests
        run: |
          if [ "${{ matrix.service }}" == "clos" ]; then
            poetry run pytest clos/tests/ --cov=clos --cov-report=xml
          elif [ "${{ matrix.service }}" == "agents" ]; then
            poetry run pytest agents/tests/ --cov=agents --cov-report=xml
          else
            cd projects/${{ matrix.service }}
            if [ -f "package.json" ]; then
              npm run test:unit -- --coverage
            else
              poetry run pytest tests/ --cov=. --cov-report=xml
            fi
          fi

      - name: Run integration tests
        if: matrix.service == 'clos'
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/candlefish_test
          REDIS_URL: redis://localhost:6379
        run: |
          poetry run pytest clos/tests/integration/ -v

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Build & Package
  build:
    name: Build ${{ matrix.component }}
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [clos, promoteros-api, promoteros-web, paintbox, agents]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.component }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/candlefish-${{ matrix.component }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/candlefish-${{ matrix.component }}:${{ github.ref_name }}
            ${{ env.DOCKER_REGISTRY }}/candlefish-${{ matrix.component }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/candlefish-${{ matrix.component }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.component }}.sarif'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.component }}.sarif'

  # Deploy to AWS
  deploy:
    name: Deploy to ${{ matrix.environment }}
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        environment: [staging, production]
        exclude:
          - environment: production
            github.ref: refs/heads/develop
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Deploy infrastructure
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="image_tag=${{ github.sha }}" \
            -var="environment=${{ matrix.environment }}"

      - name: Deploy to ECS
        run: |
          # Update CLOS service
          aws ecs update-service \
            --cluster candlefish-${{ matrix.environment }} \
            --service clos-orchestrator \
            --force-new-deployment \
            --desired-count 3

          # Update PromoterOS services
          aws ecs update-service \
            --cluster candlefish-${{ matrix.environment }} \
            --service promoteros-api \
            --force-new-deployment

          # Deploy Lambda functions
          for function in $(aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `candlefish-${{ matrix.environment }}`)].[FunctionName]' --output text); do
            aws lambda update-function-code \
              --function-name $function \
              --image-uri ${{ env.DOCKER_REGISTRY }}/candlefish-agents:${{ github.sha }}
          done

      - name: Deploy to Netlify (Frontend)
        if: matrix.environment == 'production'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          cd projects/promoteros/frontend
          npm run build
          npx netlify deploy --prod --dir=dist

      - name: Update monitoring
        run: |
          aws cloudwatch put-metric-alarm \
            --alarm-name candlefish-${{ matrix.environment }}-deployment \
            --alarm-description "Deployment health check" \
            --metric-name HealthCheck \
            --namespace Candlefish/${{ matrix.environment }} \
            --statistic Average \
            --period 60 \
            --threshold 1 \
            --comparison-operator LessThanThreshold \
            --evaluation-periods 2

      - name: Run smoke tests
        id: deploy
        run: |
          # Wait for services to be stable
          aws ecs wait services-stable \
            --cluster candlefish-${{ matrix.environment }} \
            --services clos-orchestrator promoteros-api

          # Get service URL
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names candlefish-${{ matrix.environment }}-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          
          echo "url=https://$ALB_DNS" >> $GITHUB_OUTPUT
          
          # Run smoke tests
          npm run test:smoke -- --url https://$ALB_DNS

  # Post-deployment verification
  verify:
    name: Verify Deployment
    needs: deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [staging, production]
    steps:
      - uses: actions/checkout@v4

      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          config: baseUrl=https://candlefish-${{ matrix.environment }}.com
          record: true
          tag: ${{ matrix.environment }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Performance testing
        run: |
          npm install -g @sitespeed.io/sitespeed.io
          sitespeed.io https://candlefish-${{ matrix.environment }}.com \
            --budget.configPath=.sitespeed.io/budget.json \
            --plugins.add=@sitespeed.io/plugin-lighthouse

      - name: Security scan
        run: |
          docker run --rm owasp/zap2docker-stable zap-baseline.py \
            -t https://candlefish-${{ matrix.environment }}.com \
            -r zap-report.html

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ matrix.environment }} completed
            URL: https://candlefish-${{ matrix.environment }}.com
            Version: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Rollback mechanism
  rollback:
    name: Rollback if needed
    needs: verify
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback ECS services
        run: |
          # Get previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster candlefish-${{ matrix.environment }} \
            --services clos-orchestrator \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)
          
          # Rollback to previous version
          aws ecs update-service \
            --cluster candlefish-${{ matrix.environment }} \
            --service clos-orchestrator \
            --task-definition $PREVIOUS_TASK_DEF

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ⚠️ Deployment rollback initiated for ${{ matrix.environment }}
            Reason: Post-deployment verification failed
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}